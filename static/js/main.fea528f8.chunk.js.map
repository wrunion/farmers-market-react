{"version":3,"sources":["components/UI/SiteTitle.js","components/UI/Logo.js","components/UI/TopNav.js","components/Day.js","components/MarketList.js","components/App.js","serviceWorker.js","index.js"],"names":["SiteTitle","id","Header","as","textAlign","Logo","Fragment","Image","circular","src","alt","size","centered","TopNav","state","handleItemClick","e","name","setState","activeItem","this","Menu","fluid","widths","Item","header","active","onClick","Component","Day","props","Segment","day","location","hours","booth","marketSchedule","MarketList","map","index","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAceA,MAXf,WACE,OACI,yBAAKC,GAAG,cACN,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,UAA1B,oB,SCKOC,MARf,WACE,OACA,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAOC,UAAQ,EAACC,IAAI,sEAAsEC,IAAI,GAAGC,KAAK,SAASC,UAAQ,M,6CCyB5GC,E,4MA3BbC,MAAQ,G,EAERC,gBAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiB,EAAKC,SAAS,CAACC,WAAYF,K,uDAEpD,IACAE,EAAeC,KAAKN,MAApBK,WAEV,OACE,kBAACE,EAAA,EAAD,CAAMC,OAAK,EAACC,OAAQ,GAClB,kBAACF,EAAA,EAAKG,KAAN,CAAWC,QAAM,GAAjB,QACA,kBAACJ,EAAA,EAAKG,KAAN,CACEP,KAAK,WACLS,OAAuB,YAAfP,EACRQ,QAASP,KAAKL,kBACd,kBAACM,EAAA,EAAKG,KAAN,CACAP,KAAK,kBACLS,OAAuB,mBAAfP,EACRQ,QAASP,KAAKL,kBACd,kBAACM,EAAA,EAAKG,KAAN,CACAP,KAAK,mBACLS,OAAuB,oBAAfP,EACRQ,QAASP,KAAKL,uB,GAtBDa,a,SCSNC,MATf,SAAaC,GACX,OACE,kBAACC,EAAA,EAAD,KACE,4BAAKD,EAAME,IAAX,MAAmBF,EAAMG,UACzB,qCAAWH,EAAMI,MAAjB,aAAkCJ,EAAMK,SCHxCC,EAAiB,CACrB,CACGJ,IAAK,SACLC,SAAU,sBACVC,MAAO,kBACPC,MAAO,MAEV,CACGH,IAAK,SACLC,SAAU,4BACVC,MAAO,mBACPC,MAAO,MAEV,CACGH,IAAK,UACLC,SAAU,2BACVC,MAAO,kBACPC,MAAO,MAEV,CACGH,IAAK,YACLC,SAAU,iBACVC,MAAO,mBACPC,MAAO,MAEV,CACGH,IAAK,WACLC,SAAU,qBACVC,MAAO,kBACPC,MAAO,MAEV,CACGH,IAAK,WACLC,SAAU,4BACVC,MAAO,mBACPC,MAAO,OAoBGE,MAhBf,WACE,OACE,kBAACN,EAAA,EAAD,KACE,yBAAK9B,GAAG,sBAELmC,EAAeE,KAAI,SAACN,EAAKO,GAAN,OACpB,kBAAC,EAAD,CAAKP,IAAOA,EAAIA,IACdC,SAAYD,EAAIC,SAChBC,MAASF,EAAIE,MACbC,MAASH,EAAIG,cCnCRK,MAXf,WACE,OACE,kBAAC,IAAMlC,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAYmC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2D,cCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fea528f8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Header } from 'semantic-ui-react';\n\nfunction SiteTitle() {\n  return (\n      <div id=\"site-title\">\n        <Header as=\"h2\" textAlign=\"center\">\n    Avery Organics\n        </Header>\n        {/* <p>Click on a day to see where we'll be! Or click \"Seasonal Produce\" to see what we offer every month!</p> */}\n      </div>\n  );\n}\n\nexport default SiteTitle;","import React from 'react';\nimport { Image } from 'semantic-ui-react';\n\nfunction Logo() {\n  return (\n  <React.Fragment>\n    <Image circular src=\"https://cdn.pixabay.com/photo/2015/05/07/12/17/pear-756388_1280.jpg\" alt=\"\" size=\"medium\" centered />\n  </React.Fragment>\n  );\n}\n\nexport default Logo;","import React, { Component } from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nclass TopNav extends Component {\n  state = {};\n\n  handleItemClick = (e, { name }) => this.setState({activeItem: name});\n\n  render() {\n    const { activeItem } = this.state;\n  \n  return (\n    <Menu fluid widths={4}>\n      <Menu.Item header>Home</Menu.Item>\n      <Menu.Item\n        name='about us'\n        active={activeItem === 'aboutUs'}\n        onClick={this.handleItemClick} />\n        <Menu.Item\n        name='weekly schedule'\n        active={activeItem === 'weeklySchedule'}\n        onClick={this.handleItemClick} />\n        <Menu.Item\n        name='monthly schedule'\n        active={activeItem === 'monthlySchedule'}\n        onClick={this.handleItemClick} />\n    </Menu>\n  );\n  }\n}\n\nexport default TopNav;","import React from 'react';\nimport { Segment } from 'semantic-ui-react';\n\nfunction Day(props) {\n  return (\n    <Segment>\n      <h3>{props.day} | {props.location}</h3>\n      <p>Hours: {props.hours} | Booth: {props.booth}</p>\n    </Segment>\n  );\n}\n\nexport default Day;","import React from 'react';\nimport Day from './Day';\nimport { Segment } from 'semantic-ui-react';\n\nconst marketSchedule = [  \n  {  \n     day: \"Sunday\",\n     location: \"Lents International\",\n     hours: \"9:00am - 2:00pm\",\n     booth: \"4A\"\n  },\n  {  \n     day: \"Monday\",\n     location: \"Pioneer Courthouse Square\",\n     hours: \"10:00am - 2:00pm\",\n     booth: \"7C\"\n  },\n  {  \n     day: \"Tuesday\",\n     location: \"Hillsboro Artesan Market\",\n     hours: \"5:00pm - 8:30pm\",\n     booth: \"1F\"\n  },\n  {  \n     day: \"Wednesday\",\n     location: \"Shemanski Park\",\n     hours: \"10:00am - 2:00pm\",\n     booth: \"3E\"\n  },\n  {  \n     day: \"Thursday\",\n     location: \"Northwest Portland\",\n     hours: \"2:00pm - 6:00pm\",\n     booth: \"6D\"\n  },\n  {  \n     day: \"Saturday\",\n     location: \"Beaverton Farmer's Market\",\n     hours: \"10:00am - 1:30pm\",\n     booth: \"9G\"\n  }\n ];\n\nfunction MarketList() {\n  return (\n    <Segment>\n      <div id=\"marketlist-content\">\n        {/* <h2 id=\"marketlist-title\">Come find our fresh produce every day of the week!</h2> */}\n        {marketSchedule.map((day, index) => \n        <Day day = {day.day}\n          location = {day.location}\n          hours = {day.hours}\n          booth = {day.booth} />\n        )}\n      </div>\n    </Segment>\n  );\n}\n\nexport default MarketList;","import React from 'react';\nimport SiteTitle from './UI/SiteTitle';\nimport Logo from './UI/Logo';\nimport TopNav from './UI/TopNav';\nimport MarketList from './MarketList';\n\nfunction App(){\n  return (\n    <React.Fragment>\n        <Logo />\n        <SiteTitle />\n        <TopNav />\n        <MarketList />\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}